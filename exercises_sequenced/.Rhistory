geom_bar() +
facet_grid(~ Class)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
group_by(Sex, Class) %>%
mutate(total = sum(n)) +
ggplot(aes(x = Sex, fill = Sex)) +
geom_bar() +
facet_grid(~ Class)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
group_by(Sex, Class) %>%
mutate(total = sum(n)) %>%
ggplot(aes(x = Sex, fill = Sex)) +
geom_bar() +
facet_grid(~ Class)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
group_by(Sex, Class) %>%
mutate(total = sum(n)) %>%
ggplot(aes(x = total, fill = Sex)) +
geom_bar() +
facet_grid(~ Class)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
group_by(Sex, Class) %>%
mutate(total = sum(n)) %>%
ggplot(aes(y = total, fill = Sex)) +
geom_bar() +
facet_grid(~ Class)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
group_by(Sex, Class) %>%
mutate(total = sum(n)) %>%
ggplot(aes(x = total, fill = Sex)) +
geom_bar() +
facet_grid(~ Class)
View(df_titanic)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
group_by(Sex, Class) %>%
mutate(total = sum(n)) %>%
print(df_titanic)
ggplot(aes(x = total, fill = Sex)) +
geom_bar() +
facet_grid(~ Class)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
group_by(Sex, Class) %>%
mutate(total = sum(n)) %>%
print(df_titanic) %>%
ggplot(aes(x = total, fill = Sex)) +
geom_bar() +
facet_grid(~ Class)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
group_by(Sex, Class) %>%
mutate(total = sum(n)) %>%
print(df_titanic) %>%
ggplot(aes(x = total, fill = Sex)) +
geom_bar() +
facet_grid(~ Sex)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
group_by(Sex, Class) %>%
mutate(total = sum(n)) %>%
print(df_titanic) %>%
ggplot(aes(x = Class, y = total, fill = Sex)) +
geom_bar(stat = "identity") +
facet_grid(~ Sex)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
group_by(Sex, Class) %>%
mutate(total = sum(n)) %>%
print(df_titanic) %>%
ggplot(aes(x = Sex, y = total, fill = Class)) +
geom_bar(stat = "identity") +
facet_grid(~ Class)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
group_by(Sex, Class) %>%
mutate(total = sum(n)) %>%
print(df_titanic) %>%
ggplot(aes(x = Sex, y = total, fill = Class)) +
geom_bar(stat = "identity") +
facet_grid(~ Sex)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
group_by(Sex, Class) %>%
mutate(total = sum(n)) %>%
print(df_titanic) %>%
ggplot(aes(x = Sex, y = total, fill = Class)) +
geom_bar(stat = "identity") +
facet_grid(~ Class)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
group_by(Sex, Class) %>%
mutate(total = sum(n)/2) %>%
print(df_titanic) %>%
ggplot(aes(x = Sex, y = total, fill = Class)) +
geom_bar(stat = "identity") +
facet_grid(~ Class)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
ggplot(aes(x = Sex, y = n, fill = Class)) +
geom_bar(stat = "identity") +
facet_grid(~ Class)
## NOTE: No need to edit! We'll cover how to
## do this calculation in a later exercise.
df_prop <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
Total = sum(n),
Prop = n / Total
) %>%
ungroup()
df_prop
df_titanic[df_titanic$Survived == "Yes", ] %>%
ggplot(aes(x = Sex, y = Prop, fill = Class)) +
geom_bar(stat = "identity") +
facet_grid(~ Class)
df_prop[df_prop$Survived == "Yes", ] %>%
ggplot(aes(x = Sex, y = Prop, fill = Class)) +
geom_bar(stat = "identity") +
facet_grid(~ Class)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age)
print(df_q5)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(total = sum(n))
print(df_q5)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
total = sum(n),
prop = n/total
)
print(df_q5)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
total = sum(n),
prop = n/total
)
print(df_q5)
df_q5[df_q5$Survived == "Yes", ] %>%
ggplot(aes(x = Sex, y = Prop, fill = Class)) +
geom_bar(stat = "identity") +
facet_grid(~ Class)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
total = sum(n),
prop = n/total
)
print(df_q5)
df_q5[df_q5$Survived == "Yes", ] %>%
ggplot(aes(x = Sex, y = prop, fill = Class)) +
geom_bar(stat = "identity") +
facet_grid(~ Class)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
total = sum(n),
prop = n/total
)
print(df_q5)
df_q5[df_q5$Survived == "Yes", ] %>%
ggplot(aes(x = Sex, y = prop, fill = Class)) +
geom_bar(stat = "identity") +
facet_grid(~ Age)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
total = sum(n),
prop = n/total
)
print(df_q5)
df_q5[df_q5$Survived == "Yes", ] %>%
ggplot(aes(x = Age, y = prop, fill = Class)) +
geom_bar(stat = "identity") +
facet_grid(~ Class)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
total = sum(n),
prop = n/total
)
print(df_q5)
df_q5[df_q5$Survived == "Yes", ] %>%
ggplot(aes(x = Age, y = prop, fill = Class)) +
geom_bar(stat = "identity") +
facet_grid(~ Sex)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
total = sum(n),
prop = n/total
)
print(df_q5)
df_q5[df_q5$Survived == "Yes", ] %>%
ggplot(aes(x = Age, y = prop, fill = Class)) +
geom_bar(stat = "identity") +
facet_grid(~ Class)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
total = sum(n),
prop = n/total
)
print(df_q5)
df_q5[df_q5$Survived == "Yes", ] %>%
ggplot(aes(x = Sex, y = prop, fill = Age)) +
geom_bar(stat = "identity") +
facet_grid(~ Class)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
total = sum(n),
prop = n/total
)
print(df_q5)
df_q5[df_q5$Survived == "Yes", ] %>%
ggplot(aes(x = Sex, y = prop, fill = Age)) +
geom_bar(stat = "identity") +
facet_grid(~ Class, Age)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
total = sum(n),
prop = n/total
)
print(df_q5)
df_q5[df_q5$Survived == "Yes", ] %>%
ggplot(aes(x = Sex, y = prop, fill = Age)) +
geom_bar(stat = "identity") +
facet_grid(Age ~ Class)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
total = sum(n),
prop = n/total
)
print(df_q5)
df_q5[df_q5$Survived == "Yes", ] %>%
ggplot(aes(x = Sex, y = prop, fill = Sex)) +
geom_bar(stat = "identity") +
facet_grid(Age ~ Class)
df_q5 <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
total = sum(n),
prop = n/total
)
df_q5[df_q5$Survived == "Yes", ] %>%
ggplot(aes(x = Sex, y = prop, fill = Sex)) +
geom_bar(stat = "identity") +
facet_grid(Age ~ Class)
df_prop[df_prop$Survived == "Yes", ] %>%
ggplot(aes(x = Sex, y = Prop, fill = Sex)) +
geom_bar(stat = "identity") +
facet_grid(~ Class)
## TASK: Visualize counts against `Class` and `Sex`
df_titanic[df_titanic$Survived == "Yes", ] %>%
ggplot(aes(x = Sex, y = n, fill = Sex)) +
geom_bar(stat = "identity") +
facet_grid(~ Class)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
## Version 1
filter(diamonds, cut == "Ideal")
## Version 2
diamonds %>% filter(cut == "Ideal")
df_q2 <- diamonds %>%
summarize(n_ideal = sum(cut == "Ideal"))
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q2 %>% pull(n_ideal),
21551
)
)
print("Great job!")
diamonds %>%
group_by(color, clarity) %>%
summarize(price = mean(price))
diamonds %>%
# group_by(color, clarity) %>%
summarize(price = mean(price))
diamonds %>%
group_by(color, clarity) %>%
summarize(price = mean(price))
diamonds %>%
# group_by(color, clarity) %>%
summarize(price = mean(price))
diamonds %>%
# group_by(color, clarity) %>%
summarize(price = mean(price))
diamonds %>%
group_by(color, clarity) %>%
summarize(price = mean(price))
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
depth_computed <- 100 * 2 * z / (x + y) %>%
diff <- depth - depth_computed %>%
summary(cov_depth = sd(depth) / mean(depth), cov_diff = sd())
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
depth_computed <- 100 * 2 * z / (x + y) %>%
# diff <- depth - depth_computed %>%
summary(cov_depth = sd(depth) / mean(depth), cov_diff = sd())
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
# depth_computed <- 100 * 2 * z / (x + y) %>%
# diff <- depth - depth_computed %>%
summary(cov_depth = sd(depth) / mean(depth), cov_diff = sd(depth - 100 * 2 * z / (x + y)) / mean(depth - 100 * 2 * z / (x + y)))
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
# depth_computed <- 100 * 2 * z / (x + y) %>%
# diff <- depth - depth_computed %>%
summarize(cov_depth = sd(depth) / mean(depth), cov_diff = sd(depth - 100 * 2 * z / (x + y)) / mean(depth - 100 * 2 * z / (x + y)))
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
depth_computed <- 100 * 2 * z / (x + y),
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
depth_computed <- 100 * 2 * z / (x + y)
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y), diff = depth - depth_computes) %>%
summarize(cov_depth = sd(depth) / mean(depth), cov_diff = sd() / mean())
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y), diff = depth - depth_computed) %>%
summarize(cov_depth = sd(depth) / mean(depth), cov_diff = sd() / mean())
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y), diff = depth - depth_computed) %>%
summarize(cov_depth = sd(depth) / mean(depth), cov_diff = sd(diff) / mean(diff))
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y)) %>%
summarize(cov_depth = sd(depth) / mean(depth), cov_diff = sd(diff) / mean(diff))
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y)) %>%
summarize(cov_depth = sd(depth) / mean(depth))
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y))
# summarize(cov_depth = sd(depth) / mean(depth))
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y)) %>%
mutate(diff = depth - depth_computed)
# summarize(cov_depth = sd(depth) / mean(depth))
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y)) %>%
mutate(diff = depth - depth_computed)
summarize(cov_depth = sd(depth) / mean(depth))
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y)) %>%
mutate(diff = depth - depth_computed) %>%
summarize(cov_depth = sd(depth) / mean(depth), cov_diff = sd(diff) / mean(diff))
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y), diff = depth - depth_computed)
# mutate(diff = depth - depth_computed) %>%
# summarize(cov_depth = sd(depth) / mean(depth), cov_diff = sd(diff) / mean(diff))
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y), diff = depth - depth_computed)
summarize(cov_depth = sd(depth) / mean(depth), cov_diff = sd(diff) / mean(diff))
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y), diff = depth - depth_computed)
summarize(cov_depth = sd(depth) / mean(depth), cov_diff = sd(diff) / mean(diff))
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y), diff = depth - depth_computed) %>%
summarize(cov_depth = sd(depth) / mean(depth), cov_diff = sd(diff) / mean(diff))
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y), diff = depth - depth_computed) %>%
summarize(cov_depth = sd(depth) / mean(depth), sd_diff = sd(diff), mean_diff = mean(diff), cov_diff = sd(diff) / mean(diff))
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y), diff = depth - depth_computed)
# summarize(cov_depth = sd(depth) / mean(depth), sd_diff = sd(diff), mean_diff = mean(diff), cov_diff = sd(diff) / mean(diff))
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y), diff = depth - depth_computed)
summarize(cov_depth = sd(depth) / mean(depth), sd_diff = sd(diff), mean_diff = mean(diff), cov_diff = sd(diff) / mean(diff))
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y), diff = depth - depth_computed)
# summarize(cov_depth = sd(depth) / mean(depth), sd_diff = sd(diff), mean_diff = mean(diff), cov_diff = sd(diff) / mean(diff))
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y), diff = depth - depth_computed) %>%
summarize(cov_depth = sd(depth) / mean(depth), sd_diff = sd(diff), mean_diff = mean(diff), cov_diff = sd(diff) / mean(diff))
df_q4
?sd
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y), diff = depth - depth_computed) %>%
summarize(cov_depth = sd(depth) / mean(depth), cov_diff = sd(diff, na.rm = TRUE) / mean(diff, na.rm = TRUE))
df_q4
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
View(measurement)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
print(volt_to_celcius(5))
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
View(measurement)
View(measurement)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
View(measurement)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
View(measurement)
View(measurement)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
View(measurement)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
View(measurement)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
source("~/Documents/ISIM/Lab2/Untitled.R", echo=TRUE)
View(measurement)
